$date
	Thu Sep 20 23:13:22 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module behavioralMultiplexer $end
$var wire 1 ! address0 $end
$var wire 1 " address1 $end
$var wire 1 # in0 $end
$var wire 1 $ in1 $end
$var wire 1 % in2 $end
$var wire 1 & in3 $end
$var wire 1 ' out $end
$var wire 4 ( inputs [3:0] $end
$var wire 2 ) address [1:0] $end
$upscope $end
$scope module testMultiplexer $end
$var wire 1 * out $end
$var reg 1 + addr0 $end
$var reg 1 , addr1 $end
$var reg 1 - in0 $end
$var reg 1 . in1 $end
$var reg 1 / in2 $end
$var reg 1 0 in3 $end
$scope module multiplexer $end
$var wire 1 1 A0andA1 $end
$var wire 1 2 A0andnA1 $end
$var wire 1 + address0 $end
$var wire 1 , address1 $end
$var wire 1 - in0 $end
$var wire 1 3 in0in1or $end
$var wire 1 4 in0nA0nA1 $end
$var wire 1 . in1 $end
$var wire 1 5 in1nA0A1 $end
$var wire 1 / in2 $end
$var wire 1 6 in2A0nA1 $end
$var wire 1 7 in2in3or $end
$var wire 1 0 in3 $end
$var wire 1 8 in3A0A1 $end
$var wire 1 9 nA0 $end
$var wire 1 : nA0andA1 $end
$var wire 1 ; nA0andnA1 $end
$var wire 1 < nA1 $end
$var wire 1 * out $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
0-
0,
0+
x*
bz )
bz (
x'
z&
z%
z$
z#
z"
z!
$end
#50000
1<
19
04
01
0:
02
#100000
1;
08
06
05
#150000
07
03
#200000
0*
#1000000
1-
#1050000
14
#1100000
13
#1150000
1*
#2000000
x-
0.
1+
#2050000
x4
09
12
#2100000
x3
0;
#2150000
x*
04
#2200000
03
#2250000
0*
#3000000
1.
#3050000
15
#3100000
13
#3150000
1*
#4000000
x.
0/
1,
0+
#4050000
x5
0<
19
02
#4100000
x3
1:
05
#4150000
x*
03
#4200000
0*
#5000000
1/
#5050000
16
#5100000
17
#5150000
1*
#6000000
x/
00
1+
#6050000
x6
09
11
#6100000
x7
0:
#6150000
x*
06
#6200000
07
#6250000
0*
#7000000
10
#7050000
18
#7100000
17
#7150000
1*
#8000000
